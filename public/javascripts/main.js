// Generated by CoffeeScript 1.4.0

/*

	This is the main app script file
*/


(function() {
  var $chat, $cover, $dash, $guide, $msg, $msgBox, $turnName, activePiece, activePos, add_message, bind_piece_listeners, blackCells, board, challenge, change_dash_bg, change_turn, change_turn_name, check_turn, colLabels, color, game_start, get_player_name, id, initialize, move_piece, name, pause, piece_click, piecesToSet, place_piece, progress, reset_all_colors, reset_allowed_colors, reset_lmove_color, resume, set_challenge_winner, show_allowed_positions, show_winner, square_click, state, test_challenge, turn, turnCount, unbind_cell_listeners, unbind_piece_listeners, war_start, whiteCells;

  board = $('#board');

  progress = $('#progress');

  whiteCells = $('#board ul:gt(4) li');

  blackCells = $('#board ul:lt(3) li');

  name = null;

  turnCount = 1;

  state = null;

  challenge = null;

  activePiece = null;

  activePos = null;

  turn = null;

  colLabels = 'ABCDEFGHI';

  $cover = $('#cover');

  $guide = $('#guide');

  $chat = $('#chat');

  $msg = $('#msg');

  id = null;

  color = null;

  piecesToSet = 21;

  get_player_name = function() {
    var form;
    $cover.fadeIn();
    form = $('#name');
    $(form).submit($.proxy(function(e) {
      e.preventDefault();
      name = $('#playerName').val();
      if (!name || name.length > 16) {
        name = 'Anonymous';
      }
      form.remove();
      change_turn_name(name);
      pause();
      socket.emit('player connect', {
        name: name
      });
      return $chat.fadeIn().submit($.proxy(function(e) {
        var chatName, msg;
        e.preventDefault();
        chatName = name;
        msg = $msg.val();
        if (msg !== '' && msg.length < 64) {
          socket.emit('add message', {
            author: chatName,
            message: msg
          });
        }
        return $msg.val('');
      }));
    }));
    form.show().appendTo($cover);
    return $('#playerName').focus();
  };

  initialize = function() {
    $chat.hide();
    bind_piece_listeners();
    return get_player_name();
  };

  game_start = function() {
    resume();
    change_dash_bg(color);
    $guide.hide();
    $('#pieces').show();
    return state = 'preparation';
  };

  pause = function() {
    $cover.fadeIn();
    return progress.show().appendTo($cover);
  };

  resume = function() {
    $cover.fadeOut();
    return progress.hide();
  };

  unbind_cell_listeners = function() {
    return $('#board ul li').off('click');
  };

  bind_piece_listeners = function() {
    return $('.piece').each(function() {
      var $this, $thisP;
      $this = $(this);
      $thisP = $this.parent();
      return $thisP.click(function() {
        var bot_occ, bottomCell, currentCol, currentRow, leftCell, left_occ, pos, rightCell, right_occ, topCell, top_occ;
        pos = $thisP.attr('id');
        if (state === 'preparation') {
          if ((pos === void 0) && (!$thisP.hasClass('occupied'))) {
            return piece_click(this);
          }
        } else if (state === 'war') {
          currentRow = pos[1];
          currentCol = pos[0];
          topCell = currentCol + (parseInt(currentRow) + 1);
          leftCell = colLabels[colLabels.indexOf(currentCol) - 1] + currentRow;
          rightCell = colLabels[colLabels.indexOf(currentCol) + 1] + currentRow;
          bottomCell = currentCol + (parseInt(currentRow) - 1);
          top_occ = bot_occ = left_occ = right_occ = false;
          if ($('li#' + topCell).hasClass('occupied') || currentRow === '8') {
            top_occ = true;
          }
          if ($('li#' + bottomCell).hasClass('occupied') || currentRow === '1') {
            bot_occ = true;
          }
          if ($('li#' + leftCell).hasClass('occupied') || currentCol === 'A') {
            left_occ = true;
          }
          if ($('li#' + rightCell).hasClass('occupied') || currentCol === 'I') {
            right_occ = true;
          }
          if (top_occ && bot_occ && left_occ && right_occ) {
            return console.log('can move this piece sorry');
          } else {
            return piece_click(this);
          }
        }
      });
    });
  };

  unbind_piece_listeners = function() {
    return $('.piece').parent().off('click');
  };

  $msgBox = $('#messages ul');

  add_message = function(data) {
    return $("<li><span class='author'>" + data.author + "</span> : " + data.message + "</li>").prependTo($msgBox);
  };

  $dash = $('#Dash');

  change_dash_bg = function(c) {
    var clr;
    if (c === 'black') {
      clr = '#130f30';
    } else {
      clr = '#FFFFE5';
    }
    return $dash.css('background-color', clr);
  };

  $turnName = $('#turn');

  change_turn_name = function(nm) {
    return $turnName.html("General " + nm);
  };

  show_allowed_positions = function(color) {
    var $bottomCell, $leftCell, $rightCell, $topCell, bottomCell, cellCol, cellRow, leftCell, rightCell, topCell;
    if (state === 'preparation') {
      if (color === 'black') {
        return blackCells.addClass('legal').each(function() {
          var cell;
          cell = $(this);
          if (!cell.hasClass('occupied')) {
            return cell.click(function() {
              return square_click(this);
            });
          }
        });
      } else if (color === 'white') {
        return whiteCells.addClass('legal').each(function() {
          var cell;
          cell = $(this);
          if (!cell.hasClass('occupied')) {
            return cell.click(function() {
              return square_click(this);
            });
          }
        });
      } else {
        return console.log('unknown color');
      }
    } else if (state === 'war') {
      cellRow = activePos[1];
      cellCol = activePos[0];
      if (cellRow !== '8') {
        topCell = cellCol + (parseInt(cellRow) + 1);
        $topCell = $('li#' + topCell);
        if (!$topCell.hasClass('occupied')) {
          if ($topCell.hasClass('opponent')) {
            $topCell.addClass('challenge');
          } else {
            $topCell.addClass('legal');
          }
          $topCell.click(function() {
            return square_click(this);
          });
        }
      }
      if (cellCol !== 'A') {
        leftCell = colLabels[colLabels.indexOf(cellCol) - 1] + cellRow;
        $leftCell = $('li#' + leftCell);
        if (!$leftCell.hasClass('occupied')) {
          if ($leftCell.hasClass('opponent')) {
            $leftCell.addClass('challenge');
          } else {
            $leftCell.addClass('legal');
          }
          $leftCell.click(function() {
            return square_click(this);
          });
        }
      }
      if (cellCol !== 'I') {
        rightCell = colLabels[colLabels.indexOf(cellCol) + 1] + cellRow;
        $rightCell = $('li#' + rightCell);
        if (!$rightCell.hasClass('occupied')) {
          if ($rightCell.hasClass('opponent')) {
            $rightCell.addClass('challenge');
          } else {
            $rightCell.addClass('legal');
          }
          $rightCell.click(function() {
            return square_click(this);
          });
        }
      }
      if (cellRow !== '1') {
        bottomCell = cellCol + (parseInt(cellRow) - 1);
        $bottomCell = $('li#' + bottomCell);
        if (!$bottomCell.hasClass('occupied')) {
          if ($bottomCell.hasClass('opponent')) {
            $bottomCell.addClass('challenge');
          } else {
            $bottomCell.addClass('legal');
          }
          return $bottomCell.click(function() {
            return square_click(this);
          });
        }
      }
    }
  };

  reset_allowed_colors = function() {
    return $('#board ul li').removeClass('legal challenge ');
  };

  reset_all_colors = function() {
    return $('#board ul li').removeClass('legal');
  };

  reset_lmove_color = function() {
    return $('#board ul li').removeClass('lmove opponentMoved');
  };

  piece_click = function(piece) {
    var $piece;
    $piece = $(piece);
    activePiece = piece;
    if (state === 'war') {
      activePos = $piece.attr('id');
    }
    $piece.addClass('active');
    unbind_cell_listeners();
    unbind_piece_listeners();
    return show_allowed_positions(color);
  };

  square_click = function(li) {
    var $activePiece, $li, $span, desc, destinationCell, selectedPiece, sourceCell, span;
    if (activePiece) {
      $li = $(li);
      $activePiece = $(activePiece);
      span = $activePiece.html();
      $span = $(span);
      $span.appendTo($li);
      destinationCell = $li.attr('id');
      if (state === 'preparation') {
        $span.addClass('hint--right');
        desc = $span.attr('title');
        $span.removeAttr('title').attr('data-hint', desc);
        $activePiece.removeClass('active').fadeOut(100);
        --piecesToSet;
        $li.addClass('occupied').off('click');
        socket.emit('place piece', {
          cell: destinationCell,
          name: name
        });
        if (piecesToSet === 0) {
          $('#pieces').hide();
          $guide.show();
          pause();
          socket.emit('player ready', {
            name: name
          });
        }
      } else if (state === 'war') {
        sourceCell = $activePiece.attr('id');
        selectedPiece = $($activePiece.find('.piece img')).attr('alt');
        $activePiece.removeClass('active occupied').children('.piece').remove();
        $li.addClass('occupied');
        if ($li.hasClass('challenge')) {
          challenge = true;
        } else {
          challenge = false;
        }
        socket.emit('move piece', {
          crName: name,
          srcCell: sourceCell,
          destCell: destinationCell,
          piece: selectedPiece,
          challenge: challenge
        });
      }
      reset_allowed_colors();
      bind_piece_listeners();
      activePiece = null;
      return activePos = null;
    }
  };

  place_piece = function(data) {
    return $('li#' + data.cell).addClass('opponent');
  };

  war_start = function(data) {
    unbind_cell_listeners();
    unbind_piece_listeners();
    bind_piece_listeners();
    reset_all_colors();
    resume();
    state = 'war';
    return check_turn(data);
  };

  check_turn = function(data) {
    turn = data.turn;
    change_turn_name(data.name);
    change_dash_bg(turn);
    if (turn === color) {
      return resume();
    } else {
      return pause();
    }
  };

  change_turn = function() {
    if (turn === 'white') {
      turn = 'black';
    } else if (turn === 'black') {
      turn = 'white';
    } else {
      console.log('change_turn error');
    }
    return socket.emit('change turn', {
      turn: turn
    });
  };

  move_piece = function(data) {
    reset_lmove_color();
    $('li#' + data.destCell).addClass('opponentMoved opponent');
    return $('li#' + data.srcCell).addClass('lmove').removeClass('opponent');
  };

  test_challenge = function(data) {
    var piece;
    piece = $('li#' + data.destCell).find('.piece img').attr('alt');
    return socket.emit('challenge end', {
      challengee: piece,
      ceName: name,
      destCell: data.destCell,
      challenger: data.challenger,
      crName: data.crName,
      color: color
    });
  };

  set_challenge_winner = function(data) {
    var destLi;
    destLi = $('#' + data.destCell);
    if (data.tie) {
      destLi.find('img[alt="' + data.winner + '"]').parent().remove();
      destLi.removeClass('opponent opponentMoved occupied');
    } else {
      if ((destLi.find('img[alt="' + data.winner + '"]')).length !== 0) {
        destLi.removeClass('opponent opponentMoved');
      } else {
        destLi.find('img[alt!="' + data.winner + '"]').parent().remove();
        destLi.removeClass('occupied');
      }
    }
    unbind_cell_listeners();
    bind_piece_listeners();
    if (data.end) {
      return show_winner(data);
    }
  };

  show_winner = function(data) {
    var result, sub, tempName;
    tempName = data.winnerName;
    if (name === data.winnerName) {
      sub = "Well played, congratulations!";
    } else {
      sub = "You've been outplayed, sorry.";
    }
    resume();
    result = "<div id='result'>\n    <img src='/images/GG_logo.png' alt='Game of the Generals Online' title='Game of the Generals Online' />\n    <hr />\n    <h1>General " + tempName + "<br/>has WON!</h1>\n    <hr />\n    <h2>" + sub + "</h2>\n</div>";
    $cover.fadeIn();
    return $(result).appendTo($cover);
  };

  window.socket = io.connect();

  socket.on('initial connect', function() {
    return initialize();
  });

  socket.on('player assign', function(data) {
    console.log('socket.on player assign');
    id = data.id;
    return color = data.color;
  });

  socket.on('game start', function(data) {
    console.log('socket.on game start');
    return game_start();
  });

  socket.on('war start', function(data) {
    console.log('socket.on war start');
    turn = data.turn;
    return war_start(data);
  });

  socket.on('change turn', function(data) {
    console.log('socket.on change turn');
    return check_turn(data);
  });

  socket.on('place piece', function(cell) {
    console.log('place piece');
    return place_piece(cell);
  });

  socket.on('move piece', function(data) {
    console.log('move piece');
    move_piece(data);
    if (!data.end) {
      return change_turn();
    }
  });

  socket.on('end game', function(data) {
    console.log('end game');
    return show_winner(data);
  });

  socket.on('challenge start', function(data) {
    console.log('challenge start');
    return test_challenge(data);
  });

  socket.on('challenge complete', function(data) {
    console.log('challenge end');
    return set_challenge_winner(data);
  });

  socket.on('add message', function(data) {
    console.log('add message');
    return add_message(data);
  });

}).call(this);
